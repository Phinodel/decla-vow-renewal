import { GoogleSpreadsheet } from 'google-spreadsheet';

export const getList = async () => {
  try {
    // Initialize the sheet - doc ID is the long id in the sheets URL
    console.log(process.env.NEXT_PUBLIC_SPREADSHEET_ID);
    console.log(process.env.NEXT_PUBLIC_GOOGLE_SHEETS_CLIENT_EMAIL);
    console.log(process.env.NEXT_PUBLIC_GOOGLE_SHEETS_PRIVATE_KEY);
    const doc = new GoogleSpreadsheet(process.env.NEXT_PUBLIC_SPREADSHEET_ID || '');

    if (!doc) {
      throw new Error('could not find doc');
    }

    await doc.useServiceAccountAuth({
      // env var values are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      client_email: process.env.NEXT_PUBLIC_GOOGLE_SHEETS_CLIENT_EMAIL || '',
      private_key: (process.env.NEXT_PUBLIC_GOOGLE_SHEETS_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
    });

    await doc.loadInfo(); // loads document properties and worksheets

    console.log(doc);

    const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    console.log(sheet.title);
    console.log(sheet.rowCount);
  } catch (err) {
    console.log(err);
  }
};

// import { google } from 'googleapis';

// const target = ['https://www.googleapis.com/auth/spreadsheets.readonly'];

// export const getList = async () => {
//   try {
//     const jwt = new google.auth.JWT(
//       process.env.NEXT_PUBLIC_GOOGLE_SHEETS_CLIENT_EMAIL,
//       undefined,
//       (process.env.NEXT_PUBLIC_GOOGLE_SHEETS_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
//       target,
//     );

//     const sheets = google.sheets({ version: 'v4', auth: jwt });
//     console.log({ sheets });

//     const response = await sheets.spreadsheets.values.get({
//       spreadsheetId: process.env.NEXT_PUBLIC_SPREADSHEET_ID,
//       range: 'emoji', // sheet name
//     });

//     const rows = response.data.values;

//     if (rows?.length) {
//       return rows;
//     }
//   } catch (err) {
//     console.log(err);
//   }

//   return [];
// };

export const updateList = async (data: any) => {
  console.log({ data });
};
